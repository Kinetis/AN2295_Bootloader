<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\hello.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\hello.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Tue Jun 17 10:55:30 2014
<BR><P>
<H3>Maximum Stack Usage =         40 bytes + Unknown(Functions without stacksize, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__main &rArr; FLASH_ProgramSectionByLongs
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[12]">JumpToUserApplication</a>
</UL>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1]">Boot_ResetMCU</a> from bootloader.o(i.Boot_ResetMCU) referenced 14 times from bootloader.o(.IntVectTable)
 <LI><a href="#[2]">FLASH_FlashCommandSequenceStart</a> from flash_kinetisramfunc.o(i.FLASH_FlashCommandSequenceStart) referenced from flash_kinetis.o(i.FLASH_Initialization)
 <LI><a href="#[0]">__main</a> from bootloader.o(i.__main) referenced from bootloader.o(.IntVectTable)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[12]"></a>JumpToUserApplication</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, bootloader_asm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[4]"></a>CRC_AddByte</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, crc.o(i.CRC_AddByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRC_AddByte
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_AddLong
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[3]"></a>CRC_AddLong</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, crc.o(i.CRC_AddLong))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC_AddLong &rArr; CRC_AddByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_AddByte
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2]"></a>FLASH_FlashCommandSequenceStart</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, flash_kinetisramfunc.o(i.FLASH_FlashCommandSequenceStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_FlashCommandSequenceStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash_kinetis.o(i.FLASH_Initialization)
</UL>
<P><STRONG><a name="[10]"></a>FLASH_Initialization</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, flash_kinetis.o(i.FLASH_Initialization))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[c]"></a>FLASH_ProgramLongWord</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, flash_kinetis.o(i.FLASH_ProgramLongWord))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramSectionByLongs
</UL>

<P><STRONG><a name="[5]"></a>FLASH_ProgramSectionByPhrases</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, flash_kinetis.o(i.FLASH_ProgramSectionByPhrases), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramPhrase
</UL>

<P><STRONG><a name="[8]"></a>UART_GetChar</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rs232.o(i.UART_GetChar))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Initialization
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCrc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAddress
</UL>

<P><STRONG><a name="[a]"></a>UART_Initialization</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, rs232.o(i.UART_Initialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART_Initialization
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetChar
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1]"></a>Boot_ResetMCU</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bootloader.o(i.Boot_ResetMCU))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bootloader.o(.IntVectTable)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_EraseSector</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, flash_kinetis.o(i.FLASH_EraseSector))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[6]"></a>FLASH_ProgramPhrase</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, flash_kinetis.o(i.FLASH_ProgramPhrase), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramSectionByPhrases
</UL>

<P><STRONG><a name="[b]"></a>FLASH_ProgramSectionByLongs</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, flash_kinetis.o(i.FLASH_ProgramSectionByLongs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_ProgramSectionByLongs
</UL>
<BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramLongWord
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[e]"></a>UART_PutChar</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rs232.o(i.UART_PutChar))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendResultCRC
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendResult
</UL>

<P><STRONG><a name="[0]"></a>__main</STRONG> (Thumb, 726 bytes, Stack size 24 bytes, bootloader.o(i.__main))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __main &rArr; FLASH_ProgramSectionByLongs
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutChar
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Initialization
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetChar
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToUserApplication
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramSectionByLongs
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Initialization
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseSector
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_AddLong
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_AddByte
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_ResetMCU
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendResultCRC
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendResult
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCrc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAddress
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bootloader.o(.IntVectTable)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[7]"></a>ReadAddress</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bootloader.o(i.ReadAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetChar
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[9]"></a>ReadCrc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bootloader.o(i.ReadCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadCrc
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetChar
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[d]"></a>SendResult</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bootloader.o(i.SendResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SendResult
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendResultCRC
</UL>

<P><STRONG><a name="[f]"></a>SendResultCRC</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bootloader.o(i.SendResultCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SendResultCRC &rArr; SendResult
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutChar
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendResult
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
